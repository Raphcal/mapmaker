package fr.rca.mapmaker.team.git;

import java.util.List;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;

/**
 *
 * @author Raphaël Calabro (raphael.calabro@netapsys.fr)
 */
public class CommitDialog extends javax.swing.JDialog {

	public static interface Callback {
		void onOK(String message, boolean push, boolean forcePush, boolean amendLastCommit);
		void onCancel();
	}
	
	private final Callback callback;
	private final String branchName;
	private final String lastCommitMessage;

	public CommitDialog() {
		this.callback = null;
		this.branchName = "main";
		this.lastCommitMessage = null;
	}

	/**
	 * Creates new form CommitDialog
	 */
	public CommitDialog(java.awt.Frame parent, boolean modal, String branchName, String lastCommitMessage, Callback callback) {
		super(parent, modal);
		this.callback = callback;
		this.lastCommitMessage = lastCommitMessage;
		this.branchName = branchName;
		initComponents();
	}

	public String getBranchName() {
		return branchName;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        commitMessageLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        commitMessageTextPane = new javax.swing.JTextPane();
        modificationLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        modificationTable = new javax.swing.JTable();
        cancelButton = new javax.swing.JButton();
        commitButton = new javax.swing.JButton();
        pushCheckBox = new javax.swing.JCheckBox();
        amendCheckbox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        forcePushCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        commitMessageLabel.setText("Message de commit :");

        jScrollPane1.setViewportView(commitMessageTextPane);

        modificationLabel.setText("Fichiers modifiés :");

        modificationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fichier", "Action", "Chemin"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(modificationTable);

        cancelButton.setText("Annuler");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        commitButton.setText("Commit");
        commitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commitButtonActionPerformed(evt);
            }
        });

        pushCheckBox.setSelected(true);
        pushCheckBox.setText("Push");

        amendCheckbox.setText("Amend last commit");
        amendCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amendCheckboxActionPerformed(evt);
            }
        });

        jLabel1.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("resources/language").getString("team.git.branch.name"), new Object[] {getBranchName()})); // NOI18N

        forcePushCheckBox.setText("Force");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(pushCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(forcePushCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(commitButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(commitMessageLabel)
                            .addComponent(amendCheckbox))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(modificationLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(commitMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(amendCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modificationLabel)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(commitButton)
                    .addComponent(pushCheckBox)
                    .addComponent(forcePushCheckBox))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
		setVisible(false);
		callback.onCancel();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void commitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commitButtonActionPerformed
		setVisible(false);
		callback.onOK(commitMessageTextPane.getText(), pushCheckBox.isSelected(), forcePushCheckBox.isSelected(), amendCheckbox.isSelected());
    }//GEN-LAST:event_commitButtonActionPerformed

    private void amendCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amendCheckboxActionPerformed
        // TODO add your handling code here:
		if (amendCheckbox.isSelected() && lastCommitMessage != null) {
			commitMessageTextPane.setText(lastCommitMessage);
		}
    }//GEN-LAST:event_amendCheckboxActionPerformed

	public void setEntries(final List<CommitEntry> entries) {
		modificationTable.setModel(new TableModel() {

			@Override
			public int getRowCount() {
				return entries.size();
			}

			@Override
			public int getColumnCount() {
				return 3;
			}

			@Override
			public String getColumnName(int columnIndex) {
				switch(columnIndex) {
					case 0:
						return "Fichier";
					case 1:
						return "Action";
					case 2:
						return "Chemin";
					default:
						throw new IllegalArgumentException("Numéro de colonne incorrect : " + columnIndex);
				}
			}

			@Override
			public Class<?> getColumnClass(int columnIndex) {
				return String.class;
			}

			@Override
			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return false;
			}

			@Override
			public Object getValueAt(int rowIndex, int columnIndex) {
				final CommitEntry entry = entries.get(rowIndex);
				
				switch(columnIndex) {
					case 0:
						return entry.getFileName();
					case 1:
						return entry.getStatus();
					case 2:
						return entry.getRelativePath();
					default:
						throw new IllegalArgumentException("Numéro de colonne incorrect : " + columnIndex);
				}
			}

			@Override
			public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
				throw new UnsupportedOperationException("Not supported.");
			}

			@Override
			public void addTableModelListener(TableModelListener l) {
			}

			@Override
			public void removeTableModelListener(TableModelListener l) {
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox amendCheckbox;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton commitButton;
    private javax.swing.JLabel commitMessageLabel;
    private javax.swing.JTextPane commitMessageTextPane;
    private javax.swing.JCheckBox forcePushCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel modificationLabel;
    private javax.swing.JTable modificationTable;
    private javax.swing.JCheckBox pushCheckBox;
    // End of variables declaration//GEN-END:variables
}
