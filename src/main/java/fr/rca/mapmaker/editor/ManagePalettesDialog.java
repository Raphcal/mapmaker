/*
 * ManagePalettesDialog.java
 *
 * Created on 26 mars 2012, 11:28:44
 */
package fr.rca.mapmaker.editor;

import fr.rca.mapmaker.model.Duplicatable;
import fr.rca.mapmaker.model.map.PaletteMap;
import fr.rca.mapmaker.model.palette.AbstractEditablePalette;
import fr.rca.mapmaker.model.palette.EditableImagePalette;
import fr.rca.mapmaker.model.palette.Palette;
import fr.rca.mapmaker.model.palette.PaletteComboBoxModel;
import fr.rca.mapmaker.model.palette.EditableColorPalette;
import fr.rca.mapmaker.model.palette.EditablePalette;
import fr.rca.mapmaker.model.project.Project;
import java.awt.Frame;
import java.util.ResourceBundle;
import javax.swing.JOptionPane;

/**
 *
 * @author RaphaÃ«l Calabro (rcalabro@ideia.fr)
 */
public class ManagePalettesDialog extends javax.swing.JDialog {

	private static final ResourceBundle LANGUAGE = ResourceBundle.getBundle("resources/language");

	private final Frame parent;
	private Project p = new Project();

	/**
	 * Creates new form ManagePalettesDialog
	 *
	 * @param parent
	 * @param modal
	 */
	public ManagePalettesDialog(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
		this.parent = parent;
	}

	public ManagePalettesDialog(Project project, java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		p = project;
		initComponents();
		this.parent = parent;
	}

	public String getColumns() {
		final Palette palette = (Palette) paletteList.getSelectedValue();
		if (palette instanceof AbstractEditablePalette) {
			return "" + ((AbstractEditablePalette) palette).getColumns();
		}
		return "-";
	}

	public void setColumns(int columns) {
		final Palette palette = (Palette) paletteList.getSelectedValue();
		if (palette instanceof AbstractEditablePalette) {
			((AbstractEditablePalette) palette).setColumns(columns);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        project = p;
        javax.swing.JScrollPane gridScrollPane = new javax.swing.JScrollPane();
        paletteGrid = new fr.rca.mapmaker.ui.Grid();
        javax.swing.JScrollPane paletteScrollPane = new javax.swing.JScrollPane();
        paletteList = new javax.swing.JList();
        javax.swing.JButton okButton = new javax.swing.JButton();
        javax.swing.JButton cancelButton = new javax.swing.JButton();
        javax.swing.JButton addPaletteButton = new javax.swing.JButton();
        removePaletteButton = new javax.swing.JButton();
        renamePaletteButton = new javax.swing.JButton();
        duplicatePaletteButton = new javax.swing.JButton();
        columnsLabel = new javax.swing.JLabel();
        editColumnsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("resources/language"); // NOI18N
        setTitle(bundle.getString("dialog.palette.title")); // NOI18N

        gridScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        gridScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        gridScrollPane.setPreferredSize(new java.awt.Dimension(147, 34));

        paletteGrid.setPreferredSize(new java.awt.Dimension(128, 32));

        javax.swing.GroupLayout paletteGridLayout = new javax.swing.GroupLayout(paletteGrid);
        paletteGrid.setLayout(paletteGridLayout);
        paletteGridLayout.setHorizontalGroup(
            paletteGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 128, Short.MAX_VALUE)
        );
        paletteGridLayout.setVerticalGroup(
            paletteGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 243, Short.MAX_VALUE)
        );

        gridScrollPane.setViewportView(paletteGrid);

        paletteList.setModel(project.getPaletteListModel());
        paletteList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                paletteListValueChanged(evt);
            }
        });
        paletteScrollPane.setViewportView(paletteList);

        okButton.setText(LANGUAGE.getString("button.ok")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText(LANGUAGE.getString("button.cancel")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        addPaletteButton.setText(LANGUAGE.getString("dialog.palette.add")); // NOI18N
        addPaletteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPaletteButtonActionPerformed(evt);
            }
        });

        removePaletteButton.setText(LANGUAGE.getString("dialog.palette.remove")); // NOI18N
        removePaletteButton.setEnabled(false);
        removePaletteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removePaletteButtonActionPerformed(evt);
            }
        });

        renamePaletteButton.setText(LANGUAGE.getString("dialog.palette.rename")); // NOI18N
        renamePaletteButton.setEnabled(false);
        renamePaletteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renamePaletteButtonActionPerformed(evt);
            }
        });

        duplicatePaletteButton.setText(LANGUAGE.getString("dialog.palette.duplicate")); // NOI18N
        duplicatePaletteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicatePaletteButtonActionPerformed(evt);
            }
        });

        columnsLabel.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("resources/language").getString("dialog.palette.columns"), new Object[] {getColumns()})); // NOI18N

        editColumnsButton.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("resources/language").getString("dialog.palette.columns.edit"), new Object[] {})); // NOI18N
        editColumnsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editColumnsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(paletteScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(gridScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(columnsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(editColumnsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, 0))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(okButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addPaletteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(duplicatePaletteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(renamePaletteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removePaletteButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paletteScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(columnsLabel)
                            .addComponent(editColumnsButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gridScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addPaletteButton)
                    .addComponent(renamePaletteButton)
                    .addComponent(removePaletteButton)
                    .addComponent(duplicatePaletteButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
	setVisible(false);
}//GEN-LAST:event_okButtonActionPerformed

private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
	setVisible(false);
}//GEN-LAST:event_cancelButtonActionPerformed

private void paletteListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_paletteListValueChanged
	final PaletteMap map;

	final int index = paletteList.getSelectedIndex();
	if (index >= 0 && index < project.getPalettes().size()) {
		final Palette palette = project.getPalette(paletteList.getSelectedIndex());
		map = new PaletteMap(palette, 4);

	} else {
		map = null;
	}

	duplicatePaletteButton.setEnabled(map != null && map.getPalette() instanceof Duplicatable);
	renamePaletteButton.setEnabled(map != null && map.getPalette().isEditable());
	removePaletteButton.setEnabled(map != null);
	paletteGrid.setTileMap(map);
	columnsLabel.setText(java.text.MessageFormat.format(java.util.ResourceBundle.getBundle("resources/language").getString("dialog.palette.columns"), new Object[] {getColumns()}));
}//GEN-LAST:event_paletteListValueChanged

private void renamePaletteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renamePaletteButtonActionPerformed
	final PaletteComboBoxModel model = (PaletteComboBoxModel) paletteList.getModel();
	final int index = paletteList.getSelectedIndex();

	final String name = JOptionPane.showInputDialog(this,
			LANGUAGE.getString("dialog.palette.rename.message"), model.getElementAt(index));

	if (name != null) {
		model.renameElementAt(index, name);
	}
}//GEN-LAST:event_renamePaletteButtonActionPerformed

private void removePaletteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePaletteButtonActionPerformed
	final PaletteComboBoxModel model = (PaletteComboBoxModel) paletteList.getModel();
	model.removeElementAt(paletteList.getSelectedIndex());
}//GEN-LAST:event_removePaletteButtonActionPerformed

private void addPaletteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPaletteButtonActionPerformed
	final NewPaletteDialog newPaletteDialog = new NewPaletteDialog(parent, true);
	newPaletteDialog.setTitle(LANGUAGE.getString("dialog.palette.new.title"));
	newPaletteDialog.setPaletteName("Palette " + (paletteList.getModel().getSize() + 1));
	newPaletteDialog.setVisible(true);

	if (newPaletteDialog.hasBeenConfirmed()) {
		final PaletteComboBoxModel model = (PaletteComboBoxModel) paletteList.getModel();
		final int tileSize = newPaletteDialog.getTileSize();

		final EditablePalette palette;

		if (newPaletteDialog.getPaletteType() == NewPaletteDialog.TYPE_IMAGE_PALETTE) {
			final EditableImagePalette editableImagePalette = new EditableImagePalette(tileSize, 4);
			editableImagePalette.setDirty(true);
			palette = editableImagePalette;
		}
		else if (newPaletteDialog.getPaletteType() == NewPaletteDialog.TYPE_COLOR_PALETTE) {
			final EditableColorPalette editableColorPalette = new EditableColorPalette();
			editableColorPalette.setTileSize(tileSize);
			editableColorPalette.setDirty(true);
			palette = editableColorPalette;
		}
		else {
			throw new IllegalArgumentException("Type de palette invalide : " + newPaletteDialog.getPaletteType());
		}

		palette.setName(newPaletteDialog.getPaletteName());
		model.addElement(palette);
	}
}//GEN-LAST:event_addPaletteButtonActionPerformed

    private void duplicatePaletteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicatePaletteButtonActionPerformed
		final Duplicatable<Palette> palette = (Duplicatable<Palette>) project.getPalette(paletteList.getSelectedIndex());

		final PaletteComboBoxModel model = (PaletteComboBoxModel) paletteList.getModel();
		model.addElement(palette.duplicate());
    }//GEN-LAST:event_duplicatePaletteButtonActionPerformed

    private void editColumnsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editColumnsButtonActionPerformed
		final String columns = JOptionPane.showInputDialog(this, "Columns ?", "" + getColumns());

		if (columns != null) {
			try {
				setColumns(Integer.parseInt(columns));
			} catch (NumberFormatException e) {
				e.printStackTrace();
			}
		}
    }//GEN-LAST:event_editColumnsButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel columnsLabel;
    private javax.swing.JButton duplicatePaletteButton;
    private javax.swing.JButton editColumnsButton;
    private fr.rca.mapmaker.ui.Grid paletteGrid;
    private javax.swing.JList paletteList;
    private fr.rca.mapmaker.model.project.Project project;
    private javax.swing.JButton removePaletteButton;
    private javax.swing.JButton renamePaletteButton;
    // End of variables declaration//GEN-END:variables
}
