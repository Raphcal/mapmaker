/*
 * ManagePalettesDialog.java
 *
 * Created on 26 mars 2012, 11:28:44
 */
package fr.rca.mapmaker.editor;

import fr.rca.mapmaker.model.Duplicatable;
import fr.rca.mapmaker.model.map.PaletteMap;
import fr.rca.mapmaker.model.palette.EditableImagePalette;
import fr.rca.mapmaker.model.palette.Palette;
import fr.rca.mapmaker.model.PaletteComboBoxModel;
import fr.rca.mapmaker.model.palette.EditableColorPalette;
import fr.rca.mapmaker.model.palette.EditablePalette;
import fr.rca.mapmaker.model.project.Project;
import java.awt.Frame;
import java.util.ResourceBundle;
import javax.swing.JOptionPane;

/**
 *
 * @author RaphaÃ«l Calabro (rcalabro@ideia.fr)
 */
public class ManagePalettesDialog extends javax.swing.JDialog {
	private static final ResourceBundle LANGUAGE = ResourceBundle.getBundle("resources/language");

	private Frame parent;
	private Project p = new Project();
	
	/** Creates new form ManagePalettesDialog */
	public ManagePalettesDialog(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
		this.parent = parent;
	}
	
	public ManagePalettesDialog(Project project, java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		p = project;
		initComponents();
		this.parent = parent;
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        project = p;
        javax.swing.JScrollPane gridScrollPane = new javax.swing.JScrollPane();
        paletteGrid = new fr.rca.mapmaker.ui.Grid();
        javax.swing.JScrollPane paletteScrollPane = new javax.swing.JScrollPane();
        paletteList = new javax.swing.JList();
        javax.swing.JButton okButton = new javax.swing.JButton();
        javax.swing.JButton cancelButton = new javax.swing.JButton();
        javax.swing.JButton addPaletteButton = new javax.swing.JButton();
        removePaletteButton = new javax.swing.JButton();
        renamePaletteButton = new javax.swing.JButton();
        duplicatePaletteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("resources/language"); // NOI18N
        setTitle(bundle.getString("dialog.palette.title")); // NOI18N

        gridScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        gridScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        gridScrollPane.setPreferredSize(new java.awt.Dimension(147, 34));

        paletteGrid.setPreferredSize(new java.awt.Dimension(128, 32));

        javax.swing.GroupLayout paletteGridLayout = new javax.swing.GroupLayout(paletteGrid);
        paletteGrid.setLayout(paletteGridLayout);
        paletteGridLayout.setHorizontalGroup(
            paletteGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 128, Short.MAX_VALUE)
        );
        paletteGridLayout.setVerticalGroup(
            paletteGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 272, Short.MAX_VALUE)
        );

        gridScrollPane.setViewportView(paletteGrid);

        paletteList.setModel(project.getPaletteListModel());
        paletteList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                paletteListValueChanged(evt);
            }
        });
        paletteScrollPane.setViewportView(paletteList);

        okButton.setText(LANGUAGE.getString("button.ok")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText(LANGUAGE.getString("button.cancel")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        addPaletteButton.setText(LANGUAGE.getString("dialog.palette.add")); // NOI18N
        addPaletteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPaletteButtonActionPerformed(evt);
            }
        });

        removePaletteButton.setText(LANGUAGE.getString("dialog.palette.remove")); // NOI18N
        removePaletteButton.setEnabled(false);
        removePaletteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removePaletteButtonActionPerformed(evt);
            }
        });

        renamePaletteButton.setText(LANGUAGE.getString("dialog.palette.rename")); // NOI18N
        renamePaletteButton.setEnabled(false);
        renamePaletteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renamePaletteButtonActionPerformed(evt);
            }
        });

        duplicatePaletteButton.setText(LANGUAGE.getString("dialog.palette.duplicate")); // NOI18N
        duplicatePaletteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicatePaletteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(paletteScrollPane)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gridScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(okButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addPaletteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(duplicatePaletteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(renamePaletteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removePaletteButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paletteScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                    .addComponent(gridScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, 0, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addPaletteButton)
                    .addComponent(renamePaletteButton)
                    .addComponent(removePaletteButton)
                    .addComponent(duplicatePaletteButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
	setVisible(false);
}//GEN-LAST:event_okButtonActionPerformed

private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
	setVisible(false);
}//GEN-LAST:event_cancelButtonActionPerformed

private void paletteListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_paletteListValueChanged
	final PaletteMap map;
	
	final int index = paletteList.getSelectedIndex();
	if(index >= 0 && index < project.getPalettes().size()) {
		final Palette palette = project.getPalette(paletteList.getSelectedIndex());
		map = new PaletteMap(palette, 4);
		
	} else {
		map = null;
	}
	
	duplicatePaletteButton.setEnabled(map != null && map.getPalette() instanceof Duplicatable);
	renamePaletteButton.setEnabled(map != null && map.getPalette().isEditable());
	removePaletteButton.setEnabled(map != null);
	paletteGrid.setTileMap(map);
}//GEN-LAST:event_paletteListValueChanged

private void renamePaletteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renamePaletteButtonActionPerformed
	final PaletteComboBoxModel model = (PaletteComboBoxModel) paletteList.getModel();
	final int index = paletteList.getSelectedIndex();
	
	final String name = JOptionPane.showInputDialog(this,
			LANGUAGE.getString("dialog.palette.rename.message"), model.getElementAt(index));
	
	if(name != null) {
		model.renameElementAt(index, name);
	}
}//GEN-LAST:event_renamePaletteButtonActionPerformed

private void removePaletteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePaletteButtonActionPerformed
	final PaletteComboBoxModel model = (PaletteComboBoxModel) paletteList.getModel();
	model.removeElementAt(paletteList.getSelectedIndex());
}//GEN-LAST:event_removePaletteButtonActionPerformed

private void addPaletteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPaletteButtonActionPerformed
	final NewPaletteDialog newPaletteDialog = new NewPaletteDialog(parent, true);
	newPaletteDialog.setTitle(LANGUAGE.getString("dialog.palette.new.title"));
	newPaletteDialog.setPaletteName("Palette " + (paletteList.getModel().getSize() + 1));
	newPaletteDialog.setVisible(true);
	
	if(newPaletteDialog.hasBeenConfirmed()) {
		final PaletteComboBoxModel model = (PaletteComboBoxModel) paletteList.getModel();
		final int tileSize = newPaletteDialog.getTileSize();
				
		final EditablePalette palette;
		
		if(newPaletteDialog.getPaletteType() == NewPaletteDialog.TYPE_IMAGE_PALETTE) {
			palette = new EditableImagePalette(tileSize, 4);
			
		} else if(newPaletteDialog.getPaletteType() == NewPaletteDialog.TYPE_COLOR_PALETTE) {
			palette = new EditableColorPalette();
			((EditableColorPalette)palette).setTileSize(tileSize);
			
		} else {
			throw new IllegalArgumentException("Type de palette invalide : " + newPaletteDialog.getPaletteType());
		}
		
		palette.setName(newPaletteDialog.getPaletteName());
		model.addElement(palette);
	}
}//GEN-LAST:event_addPaletteButtonActionPerformed

    private void duplicatePaletteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicatePaletteButtonActionPerformed
		final Duplicatable<Palette> palette = (Duplicatable<Palette>) project.getPalette(paletteList.getSelectedIndex());
		
		final PaletteComboBoxModel model = (PaletteComboBoxModel) paletteList.getModel();
		model.addElement(palette.duplicate());
    }//GEN-LAST:event_duplicatePaletteButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton duplicatePaletteButton;
    private fr.rca.mapmaker.ui.Grid paletteGrid;
    private javax.swing.JList paletteList;
    private fr.rca.mapmaker.model.project.Project project;
    private javax.swing.JButton removePaletteButton;
    private javax.swing.JButton renamePaletteButton;
    // End of variables declaration//GEN-END:variables
}
