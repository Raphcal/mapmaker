package fr.rca.mapmaker.editor;

import fr.rca.mapmaker.model.map.TileMap;
import fr.rca.mapmaker.model.palette.Palette;
import fr.rca.mapmaker.model.palette.PaletteReference;
import fr.rca.mapmaker.model.project.Project;
import fr.rca.mapmaker.model.sprite.Instance;
import fr.rca.mapmaker.preferences.PreferencesManager;
import fr.rca.mapmaker.ui.LayerLayout;
import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.List;
import javax.swing.JViewport;
import javax.swing.SwingWorker;
import org.jetbrains.annotations.Nullable;

/**
 *
 * @author Raphaël Calabro <raph_kun at yahoo.fr>
 */
public class GamePreviewDialog extends javax.swing.JDialog {

	private final static Dimension[] DIMENSIONS = {
		new Dimension(320, 240),
		new Dimension(568, 320),
		new Dimension(960, 544),
		new Dimension(400, 240),
	};

	/**
	 * Créé une nouvelle boîte de dialogue.
	 *
	 * @param parent Frame parente.
	 * @param modal <code>true</code> pour rendre cette fenêtre obligatoire.
	 */
	public GamePreviewDialog(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();

		deviceComboBox.setSelectedIndex(PreferencesManager.getInt(PreferencesManager.LAST_GAME_PREVIEW_DIMENSION));
		setDimension(PreferencesManager.getInt(PreferencesManager.LAST_GAME_PREVIEW_DIMENSION));
		zoomTextField.setText(PreferencesManager.get(PreferencesManager.LAST_GAME_PREVIEW_ZOOM, "100"));

		addWindowListener(new WindowAdapter() {

			@Override
			public void windowClosed(WindowEvent e) {
				PreferencesManager.set(PreferencesManager.LAST_GAME_PREVIEW_DIMENSION, deviceComboBox.getSelectedIndex());
				PreferencesManager.set(PreferencesManager.LAST_GAME_PREVIEW_ZOOM, zoomTextField.getText());
			}

		});
	}

	public void setTileMap(TileMap tileMap) {
		previewGrid.setTileMap(tileMap);
		addSprites();
	}

	private void addSprites() {
		spritePane.removeAll();
		final Project project = getProject();
		if (project == null) {
			return;
		}
		final List<Instance> instances = project.getMaps().stream()
				.filter(mapAndInstances -> mapAndInstances == previewGrid.getTileMap())
				.findAny()
				.map(TileMap::getSpriteInstances)
				.orElse(null);
		if (instances == null) {
			return;
		}
		final int mapWidth = previewGrid.getTileMapWidth() * previewGrid.getTileSize();
		final int mapHeight = previewGrid.getTileMapHeight() * previewGrid.getTileSize();

		for (final Instance instance : instances) {
			final Instance copy = new Instance(instance);
			if (copy.getX() > mapWidth || copy.getY() > mapHeight) {
				copy.setBounds(Math.min(mapWidth - copy.getWidth(), copy.getX()),
						Math.min(mapHeight - copy.getHeight(), copy.getY()),
						copy.getWidth(), copy.getHeight());
			}
			copy.setZoom(1);
			spritePane.add(copy);
		}
		spritePane.repaint();
	}

	private @Nullable Project getProject() {
		final TileMap map = previewGrid.getTileMap();
		Palette palette = map.getPalette();
		if (palette instanceof PaletteReference) {
			return ((PaletteReference) palette).getProject();
		} else {
			return null;
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        toolBar = new javax.swing.JToolBar();
        deviceComboBox = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jLabel1 = new javax.swing.JLabel();
        zoomTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        gridScrollPane = new javax.swing.JScrollPane();
        gridParentPanel = new javax.swing.JPanel(new LayerLayout(LayerLayout.Disposition.TOP_LEFT));
        spritePane = new javax.swing.JPanel();
        previewGrid = new fr.rca.mapmaker.ui.Grid();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        toolBar.setRollover(true);

        deviceComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "320x240", "iPhone 5 (568x320)", "Playstation Vita (960x544)", "PlayDate (400x240)" }));
        deviceComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deviceComboBoxActionPerformed(evt);
            }
        });
        toolBar.add(deviceComboBox);
        toolBar.add(jSeparator1);

        jLabel1.setText("Zoom");
        toolBar.add(jLabel1);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, previewGrid, org.jdesktop.beansbinding.ELProperty.create("${zoomAsInteger}"), zoomTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        toolBar.add(zoomTextField);

        jLabel2.setText("%");
        toolBar.add(jLabel2);

        gridScrollPane.getViewport().setScrollMode(JViewport.SIMPLE_SCROLL_MODE);

        spritePane.setOpaque(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, previewGrid, org.jdesktop.beansbinding.ELProperty.create("${preferredSize}"), spritePane, org.jdesktop.beansbinding.BeanProperty.create("preferredSize"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout spritePaneLayout = new javax.swing.GroupLayout(spritePane);
        spritePane.setLayout(spritePaneLayout);
        spritePaneLayout.setHorizontalGroup(
            spritePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 32, Short.MAX_VALUE)
        );
        spritePaneLayout.setVerticalGroup(
            spritePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 32, Short.MAX_VALUE)
        );

        gridParentPanel.add(spritePane);

        previewGrid.setViewport(gridScrollPane.getViewport());
        gridParentPanel.add(previewGrid);

        gridScrollPane.setViewportView(gridParentPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(gridScrollPane)
                    .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gridScrollPane)
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deviceComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deviceComboBoxActionPerformed
		final int selection = deviceComboBox.getSelectedIndex();
		if (selection >= 0) {
			setDimension(selection);
		}
    }//GEN-LAST:event_deviceComboBoxActionPerformed

	private void setDimension(int entry) {
		final Dimension dimension = DIMENSIONS[entry];
		final Dimension realDimension = new Dimension(
				dimension.width + gridScrollPane.getVerticalScrollBar().getSize().width,
				dimension.height + gridScrollPane.getHorizontalScrollBar().getSize().height);
		gridScrollPane.setPreferredSize(realDimension);
		gridScrollPane.setSize(realDimension);
		pack();
	}

	@Override
	public void setVisible(boolean b) {
		if (b) {
			SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
				@Override
				protected Void doInBackground() throws Exception {
					Thread.sleep(50);
					return null;
				}

				@Override
				protected void done() {
					setDimension(PreferencesManager.getInt(PreferencesManager.LAST_GAME_PREVIEW_DIMENSION));
				}
			};
			worker.execute();
		}
		super.setVisible(b);
	}

	

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox deviceComboBox;
    private javax.swing.JPanel gridParentPanel;
    private javax.swing.JScrollPane gridScrollPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private fr.rca.mapmaker.ui.Grid previewGrid;
    private javax.swing.JPanel spritePane;
    private javax.swing.JToolBar toolBar;
    private javax.swing.JTextField zoomTextField;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
