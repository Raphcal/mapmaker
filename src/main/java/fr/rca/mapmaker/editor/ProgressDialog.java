package fr.rca.mapmaker.editor;

import fr.rca.mapmaker.exception.Exceptions;
import java.awt.Frame;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.concurrent.ExecutionException;
import javax.swing.SwingWorker;

/**
 *
 * @author RaphaÃ«l Calabro (raphael.calabro@netapsys.fr)
 */
public class ProgressDialog extends javax.swing.JDialog {
	
	public static interface Callback<T> {
		void whenDone(T t) throws Exception;
	}

	public static <T> void showFor(final Frame parent, final SwingWorker<T, Integer> worker, final ProgressDialog.Callback<T> callback) {
		final ProgressDialog dialog = new ProgressDialog(parent, true);
	
		worker.getPropertyChangeSupport().addPropertyChangeListener("state", new PropertyChangeListener() {

			@Override
			public void propertyChange(PropertyChangeEvent event) {
				if (SwingWorker.StateValue.DONE == event.getNewValue()) {
					if (callback != null) {
						try {
							callback.whenDone(worker.get());
						} catch (InterruptedException ex) {
							Exceptions.showStackTrace(ex, parent);
						} catch (ExecutionException ex) {
							Exceptions.showStackTrace(ex, parent);
						} catch (Exception ex) {
							Exceptions.showStackTrace(ex, parent);
						}
					}
					
					// Fermeture de la popup de chargement
					dialog.setVisible(false);
					dialog.dispose();
				}
			}
		});

		worker.getPropertyChangeSupport().addPropertyChangeListener("progress", new PropertyChangeListener() {

			@Override
			public void propertyChange(PropertyChangeEvent event) {
				dialog.setProgress((Integer) event.getNewValue());
			}
		});

		worker.execute();
		dialog.setLocationRelativeTo(parent);
		dialog.setVisible(true);
	}
	
	/**
	 * Creates new form ProgressDialog
	 * @param parent
	 * @param modal
	 */
	public ProgressDialog(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
	}
	
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Progression...");
        setModal(true);
        setResizable(false);

        progressBar.setIndeterminate(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	public void setProgress(final int progress) {
		progressBar.setIndeterminate(false);
		progressBar.setValue(progress);
	}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables
}
